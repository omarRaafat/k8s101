apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-app-deployment
  namespace: app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend-deployment
  template:
    metadata:
      labels:
        app: backend-deployment
        tier: backend
    spec:
      # volumes:
      #   - name: vol-test
      #     persistentVolumeClaim:
      #       claimName: my-pvc
          # hostPath:
          #   path: /data/logs
            
      containers:
        - name: laravel-app
          image: "omar2023/lara101:lara101-v1"
          ports:
            - containerPort: 80
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh" , "-c" , "service nginx start"]
          # acts as .env file      
          env:              
           - name: DB_HOST
             value: "mysql-externalname-service"
           - name: DB_PORT
             value: "3306"
           - name: DB_DATABASE
             value: "lara101_db"    
           - name: DB_USERNAME
             value: root
           - name: DB_PASSWORD
             valueFrom:
                secretKeyRef:
                  name: mysql-db-password
                  key: db-password   
          # resources:
          #   limits:
          #     memory: "128Mi"
          #     cpu: "200m" # 1000m = 1 vcpu
          # volumeMounts:
          #   - mountPath: usr/share/nginx/html
          #     name: vol-test

          # Startup Probe - Wait for 5 minutes till the application starts            
          startupProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30              
            periodSeconds: 10            
            failureThreshold: 30  # The application will have a maximum of 5 minutes (30 * 10 = 300s) to finish its startup.
            successThreshold: 1 # Default value   

          # Liveness Probe HTTP Request
          livenessProbe:
            httpGet:
              path: /
              port: 80
              httpHeaders:
              - name: Custom-Header
                value: Awesome          
            initialDelaySeconds: 30 # initialDelaySeconds field tells  the kubelet that it should wait 60 seconds before performing the first probe. 
            periodSeconds: 10 # periodSeconds field specifies kubelet should perform a liveness probe every 10 seconds. 
            failureThreshold: 3 # when prop fails , kubelete will try three times before restart the pod 
            successThreshold: 1 # Default value

          # Readiness Probe HTTP Request            
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: 80
          #     httpHeaders:
          #     - name: Custom-Header
          #       value: Awesome   
          #   initialDelaySeconds: 30 # Pod is running but  it will mark the pod as ready only after 60 seconds
          #   periodSeconds: 10
          #   failureThreshold: 3 # Default Value
          #   successThreshold: 1 # Default value
              

# ClusterIp Service
---
apiVersion: v1
kind: Service
metadata:
  name: my-backend-service # will be used in pass proxy nginx front end app 
  namespace: app
  labels:
    app: backend-laravel-app
    tier: backend   
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  selector:
    app: backend-deployment

# Understand Startup Probe ?
# 1. Sometimes, you have to deal with legacy applications that might require an additional startup time 
# on their first initialization. 
# 2. The application will have a maximum of 5 minutes (30 * 10 = 300s) to 
# finish its startup. 
# 3. Once the startup probe has succeeded once, the liveness probe takes 
# over to provide a fast response to container deadlocks. 
# 4. If the startup probe never succeeds, the container is killed after 
# 300s and subject to the pod's restartPolicy.


 # What happens ?? USING LIVENESS PROPS
# 1. To perform a probe, the kubelet sends an HTTP GET request to the 
# server that is running in the container and listening on port 80. 
# 2. If the handler for the server's /path path returns a success code,
# the kubelet considers the container to be alive and healthy. 
# 3. If the handler returns a failure code, the kubelet kills the 
# container and restarts it.                                  
# 4. Any code greater than or equal to 200 and less than 400 
# indicates success. Any other code indicates failure.
#In short, Use liveness probe to remove unhealthy pods

# Understand Readiness Probe ?
# 1. Sometimes, applications are temporarily unable to serve traffic. 
# 2. For example, an application might need to load large data or configuration 
# files during startup, or depend on external services after startup. 
# 3. In such cases, you don't want to kill the application, but you don't 
#  want to send it requests either. 
# 4. Kubernetes provides readiness probes to detect and mitigate these 
# situations. 
# 5. A pod with containers reporting that they are not ready does not 
# receive traffic through Kubernetes Services.
# 6. Readiness probes runs on the container during its whole lifecycle.

#This way first Readiness probe will run later liveness probe will run. 